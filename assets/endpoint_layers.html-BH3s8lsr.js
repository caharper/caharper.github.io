import{_ as c,r as p,o as i,c as l,b as a,f as s,d as n,e}from"./app-Dw2r7XDh.js";const u={},r=e('<div class="hint-container info"><p class="hint-container-title">TL;DR</p><p>In this blog post, I cover the concept of endpoint layers in neural networks. These layers help you up your game in designing loss functions and more sophisticated neural network architectures. Enpoint layers allow you to design arbitary losses and metrics that don&#39;t fit the <code>loss(y_true, y_pred)</code> signature.</p><p>I provide reproducible code examples to help you understand the concept.</p></div><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Endpoint layers are a powerful concept in neural network design. They allow you to design arbitrary losses and metrics that don&#39;t fit the <code>loss(y_true, y_pred)</code> signature. When designing a network that has multiple loss functions, loss weights, or you want to add a loss that is dependent on intermediate network activations, enpoint layers are your best friend. And they&#39;re easy to code! ðŸ˜„</p><p>Simple loss functions like mean squared error and cross entropy take the form <code>loss(y_true, y_pred)</code>. Your input pipeline passes a label and sample to the network, and the network outputs a prediction. The loss function then compares the prediction to the label and returns a scalar value. This is a simple and effective way to train a network. However, when you start to implement more nuanced loss functions, you may find that the <code>loss(y_true, y_pred)</code> signature is too restrictive. Another case is when you have multiple loss functions that contribute to your overall loss, but you may want to individually track the performance of each loss rather than the combined sum. These are cases where endpoint layers come in play.</p>',4),d={href:"https://keras.io/examples/keras_recipes/endpoint_layer_pattern/",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="endpoint-layer-example" tabindex="-1"><a class="header-anchor" href="#endpoint-layer-example" aria-hidden="true">#</a> Endpoint Layer Example</h2><p>This may be a bit of a contrived example, but it should be illustrative. Say you want to train a classifier for the MNIST dataset, but you also want to add a loss that is dependent on the network&#39;s activations. Specifically, say you want the variance of the activations from the one layer to match the variance of the activations from another layer. Here, we&#39;ll use the activations following the first layer and the penultimate layer (just before the output layer).</p><p>To start, let&#39;s create our endpoint layer. To make it an <u><strong>end</strong></u>point layer, the point is to make it the last layer in the network containing all losses (maybe excluding regularization losses internal to other layers). With that in mind, if we also want to include a loss function that follows the traditional <code>loss(y_true, y_pred)</code> signature, we need to pass the labels to this layer as well. This can be a bit strange at first, but this adds a ton of flexibility to the model design. Once the model is trained, we can simply not pass the labels to the endpoint layer so it is ready for inference.</p><p>In total, our endpoint layer for this example will need the model output logits, the labels, and the activations from the first and penultimate layers. Let&#39;s make the endpoint layer now and worry about the changes to the data pipeline in a later section.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf


<span class="token keyword">class</span> <span class="token class-name">ClassificationAndVarianceMatchingLoss</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cross_entropy_weight<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> variance_loss_weight<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cross_entropy_weight <span class="token operator">=</span> cross_entropy_weight
        self<span class="token punctuation">.</span>variance_loss_weight <span class="token operator">=</span> variance_loss_weight

    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> act_1<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> act_2<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment"># If one of targets, act_1, or act_2 are not None, all should be not None</span>
        none_training_params <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token boolean">True</span> <span class="token keyword">if</span> param <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token boolean">False</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> <span class="token punctuation">[</span>targets<span class="token punctuation">,</span> act_1<span class="token punctuation">,</span> act_2<span class="token punctuation">]</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>none_training_params<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span>none_training_params<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>
                <span class="token string">&quot;If one of targets, act_1, or act_2 are not None, all should be not None&quot;</span>
            <span class="token punctuation">)</span>

        <span class="token comment"># Compute traditional cross entropy loss</span>
        <span class="token keyword">if</span> targets <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cross_entropy_loss <span class="token operator">=</span> <span class="token punctuation">(</span>
                tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
                    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>sparse_categorical_crossentropy<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> outputs<span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token operator">*</span> self<span class="token punctuation">.</span>cross_entropy_weight
            <span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_loss<span class="token punctuation">(</span>cross_entropy_loss<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_metric<span class="token punctuation">(</span>
                cross_entropy_loss<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;cross_entropy_loss&quot;</span><span class="token punctuation">,</span> aggregation<span class="token operator">=</span><span class="token string">&quot;mean&quot;</span>
            <span class="token punctuation">)</span>

            <span class="token comment"># Add the accuracy metric</span>
            self<span class="token punctuation">.</span>add_metric<span class="token punctuation">(</span>
                tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
                    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>sparse_categorical_accuracy<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> outputs<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                name<span class="token operator">=</span><span class="token string">&quot;accuracy&quot;</span><span class="token punctuation">,</span>
                aggregation<span class="token operator">=</span><span class="token string">&quot;mean&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>

        <span class="token comment"># Compute the variance loss</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span>none_training_params<span class="token punctuation">)</span><span class="token punctuation">:</span>
            variance_loss <span class="token operator">=</span> <span class="token punctuation">(</span>
                tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
                    tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>square<span class="token punctuation">(</span>
                        tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>reduce_variance<span class="token punctuation">(</span>act_1<span class="token punctuation">)</span> <span class="token operator">-</span> tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>reduce_variance<span class="token punctuation">(</span>act_2<span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token operator">*</span> self<span class="token punctuation">.</span>variance_loss_weight
            <span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_loss<span class="token punctuation">(</span>variance_loss<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_metric<span class="token punctuation">(</span>variance_loss<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;variance_loss&quot;</span><span class="token punctuation">,</span> aggregation<span class="token operator">=</span><span class="token string">&quot;mean&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># Return the prediction provided the output logits</span>
        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span>

    <span class="token comment"># Make the layer serializable</span>
    <span class="token keyword">def</span> <span class="token function">get_config</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        config <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_config<span class="token punctuation">(</span><span class="token punctuation">)</span>
        config<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
            <span class="token punctuation">{</span>
                <span class="token string">&quot;cross_entropy_weight&quot;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cross_entropy_weight<span class="token punctuation">,</span>
                <span class="token string">&quot;variance_loss_weight&quot;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>variance_loss_weight<span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">return</span> config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To compute the variance loss, we use mean-squared error between the variance of the activations from the first layer and the penultimate layer to ensure they&#39;re close to one another in magnitude. We also compute the traditional cross entropy loss for classification. We add both of these losses to the layer using <code>self.add_loss</code>. We also add the losses to the layer&#39;s metrics using <code>self.add_metric</code>. This might be really helpful for tuning the <code>cross_entropy_weight</code> and <code>variance_loss_weight</code> hyperparameters. You may want one to be slightly more important than the other, or you may want to balance their importance. By changing the weights, you can see how the losses change and how the model&#39;s performance changes.</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>During infernce, all we will need to pass to the endpoint layer is the model output logits, just like a traditional model. The other inputs are only needed during training. That is why these are all optional parameters in the <code>call</code> method.</p></div><h2 id="creating-the-model" tabindex="-1"><a class="header-anchor" href="#creating-the-model" aria-hidden="true">#</a> Creating the Model</h2><p>Next, let&#39;s design a simple convolutional neural network (CNN) for the MNIST dataset with our endpoint layer. Remember, we need to pass the inputs to the endpoint layer during training, so we need to make an <code>Input</code> layer that will pass the ground truth labels to the endpoint layer. Here&#39;s how we can do that:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">make_model</span><span class="token punctuation">(</span>training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    inputs <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>
    model_inputs <span class="token operator">=</span> <span class="token punctuation">[</span>inputs<span class="token punctuation">]</span>

    x1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
    x2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>
    x3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span>
    net <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>GlobalAveragePooling2D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span>
    output_logits <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;output_logit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>

    <span class="token comment"># Create the endpoint layer</span>
    <span class="token keyword">if</span> training<span class="token punctuation">:</span>
        targets <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
        model_inputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>targets<span class="token punctuation">)</span>
        endpoint_layer <span class="token operator">=</span> ClassificationAndVarianceMatchingLoss<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;endpoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
            output_logits<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x3
        <span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        endpoint_layer <span class="token operator">=</span> ClassificationAndVarianceMatchingLoss<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;endpoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
            output_logits
        <span class="token punctuation">)</span>

    <span class="token comment"># Create the model</span>
    model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>model_inputs<span class="token punctuation">,</span> outputs<span class="token operator">=</span>endpoint_layer<span class="token punctuation">)</span>

    <span class="token keyword">return</span> model
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tip</p><p>Naming the input layers (and output layers) if you have multiple makes life much easier when designing your input pipeline. It&#39;s good practice to name all of your layers, but these are particularly important.</p></div><h2 id="training-the-model" tabindex="-1"><a class="header-anchor" href="#training-the-model" aria-hidden="true">#</a> Training the Model</h2><h3 id="data-pipeline" tabindex="-1"><a class="header-anchor" href="#data-pipeline" aria-hidden="true">#</a> Data Pipeline</h3>`,13),m=s("code",null,"tensorflow_datasets",-1),v={href:"https://www.tensorflow.org/datasets",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"tf.data",-1),h={href:"https://www.tensorflow.org/guide/data",target:"_blank",rel:"noopener noreferrer"},_=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">prepare_ds</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> shuffle<span class="token punctuation">:</span>
        ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>

    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>
        <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>x<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">,</span> <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> y<span class="token punctuation">}</span>
    <span class="token punctuation">)</span>

    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>AUTOTUNE<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ds


<span class="token comment"># Load in the MNIST dataset</span>
train_ds<span class="token punctuation">,</span> test_ds <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span>
    <span class="token string">&quot;mnist&quot;</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;train&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle_files<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> as_supervised<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>

<span class="token comment"># Prepare the datasets</span>
batch_size <span class="token operator">=</span> <span class="token number">32</span>
train_ds <span class="token operator">=</span> prepare_ds<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_ds <span class="token operator">=</span> prepare_ds<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our pipeline is ready! Note that the <code>prepare_ds</code> function structures the dataset to have a dictionary with keys <code>&quot;image&quot;</code> and <code>&quot;label&quot;</code>, matching up with our names from the input layers to the model. This is where naming layers makes your life easier. Keras will know how to match up the inputs to the model appropriately.</p><h3 id="fitting-the-model" tabindex="-1"><a class="header-anchor" href="#fitting-the-model" aria-hidden="true">#</a> Fitting the Model</h3><p>Now, we can fit the model:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Create the model</span>
model <span class="token operator">=</span> make_model<span class="token punctuation">(</span>training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Compile and train the model</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">&#39;adam&#39;</span><span class="token punctuation">)</span>
history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># Evaluate the model</span>
eval_results <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> return_dict<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>eval_results<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Feel free to increase the epochs, but I&#39;m just showing a quick example here. Training for one epoch on my machine, these are the printed results of <code>eval_results</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;loss&quot;</span><span class="token punctuation">:</span> <span class="token number">2.3025918006896973</span><span class="token punctuation">,</span>
    <span class="token string">&quot;cross_entropy_loss&quot;</span><span class="token punctuation">:</span> <span class="token number">2.30259108543396</span><span class="token punctuation">,</span>
    <span class="token string">&quot;accuracy&quot;</span><span class="token punctuation">:</span> <span class="token number">0.12699680030345917</span><span class="token punctuation">,</span>
    <span class="token string">&quot;variance_loss&quot;</span><span class="token punctuation">:</span> <span class="token number">2.23870438276208e-06</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Not a state-of-the-art model ðŸ˜‚. But, we can see that the model was able to utilize the endpoint layer to compute the variance loss and the cross entropy loss.</p><p>This is a simple example, but it should illustrate the power of endpoint layers. You are really only limited by your imagination when it comes to designing loss functions with this approach.</p><h3 id="inference" tabindex="-1"><a class="header-anchor" href="#inference" aria-hidden="true">#</a> Inference</h3><p>During inference, you can simply set the <code>training</code> parameter to <code>False</code>. This just sets the <code>targets</code>, <code>act_1</code>, and <code>act_2</code> parameters to <code>None</code> in the endpoint layer. Here&#39;s how you can do that:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Create the inference model</span>
inference_model <span class="token operator">=</span> make_model<span class="token punctuation">(</span>training<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># Load in the weights from the training model</span>
inference_model<span class="token punctuation">.</span>set_weights<span class="token punctuation">(</span>model<span class="token punctuation">.</span>get_weights<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Create a random batch of data</span>
random_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Predict the random batch of data</span>
predictions <span class="token operator">=</span> inference_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>random_batch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="takeaways" tabindex="-1"><a class="header-anchor" href="#takeaways" aria-hidden="true">#</a> Takeaways</h2><p>Endpoint layers are extremely flexible, allowing you to design some crazy cool loss functions. By incorporating them into your repertoire, you can design more sophisticated neural network architectures and keep your code super clean. I hope this tutorial has helped you understand the concept of endpoint layers, and if you have any questions, feel free to reach out!</p><h2 id="full-code-example" tabindex="-1"><a class="header-anchor" href="#full-code-example" aria-hidden="true">#</a> Full Code Example</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf
<span class="token keyword">import</span> tensorflow_datasets <span class="token keyword">as</span> tfds


<span class="token keyword">class</span> <span class="token class-name">ClassificationAndVarianceMatchingLoss</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cross_entropy_weight<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> variance_loss_weight<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>cross_entropy_weight <span class="token operator">=</span> cross_entropy_weight
        self<span class="token punctuation">.</span>variance_loss_weight <span class="token operator">=</span> variance_loss_weight

    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> act_1<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> act_2<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment"># If one of targets, act_1, or act_2 are not None, all should be not None</span>
        none_training_params <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token boolean">True</span> <span class="token keyword">if</span> param <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token boolean">False</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> <span class="token punctuation">[</span>targets<span class="token punctuation">,</span> act_1<span class="token punctuation">,</span> act_2<span class="token punctuation">]</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>none_training_params<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span>none_training_params<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>
                <span class="token string">&quot;If one of targets, act_1, or act_2 are not None, all should be not None&quot;</span>
            <span class="token punctuation">)</span>

        <span class="token comment"># Compute traditional cross entropy loss</span>
        <span class="token keyword">if</span> targets <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cross_entropy_loss <span class="token operator">=</span> <span class="token punctuation">(</span>
                tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
                    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>sparse_categorical_crossentropy<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> outputs<span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token operator">*</span> self<span class="token punctuation">.</span>cross_entropy_weight
            <span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_loss<span class="token punctuation">(</span>cross_entropy_loss<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_metric<span class="token punctuation">(</span>
                cross_entropy_loss<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;cross_entropy_loss&quot;</span><span class="token punctuation">,</span> aggregation<span class="token operator">=</span><span class="token string">&quot;mean&quot;</span>
            <span class="token punctuation">)</span>

            <span class="token comment"># Add the accuracy metric</span>
            self<span class="token punctuation">.</span>add_metric<span class="token punctuation">(</span>
                tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
                    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>sparse_categorical_accuracy<span class="token punctuation">(</span>targets<span class="token punctuation">,</span> outputs<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                name<span class="token operator">=</span><span class="token string">&quot;accuracy&quot;</span><span class="token punctuation">,</span>
                aggregation<span class="token operator">=</span><span class="token string">&quot;mean&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>

        <span class="token comment"># Compute the variance loss</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span>none_training_params<span class="token punctuation">)</span><span class="token punctuation">:</span>
            variance_loss <span class="token operator">=</span> <span class="token punctuation">(</span>
                tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
                    tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>square<span class="token punctuation">(</span>
                        tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>reduce_variance<span class="token punctuation">(</span>act_1<span class="token punctuation">)</span> <span class="token operator">-</span> tf<span class="token punctuation">.</span>math<span class="token punctuation">.</span>reduce_variance<span class="token punctuation">(</span>act_2<span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token operator">*</span> self<span class="token punctuation">.</span>variance_loss_weight
            <span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_loss<span class="token punctuation">(</span>variance_loss<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_metric<span class="token punctuation">(</span>variance_loss<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;variance_loss&quot;</span><span class="token punctuation">,</span> aggregation<span class="token operator">=</span><span class="token string">&quot;mean&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># Return the prediction provided the output logits</span>
        <span class="token keyword">return</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span>

    <span class="token comment"># Make the layer serializable</span>
    <span class="token keyword">def</span> <span class="token function">get_config</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        config <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_config<span class="token punctuation">(</span><span class="token punctuation">)</span>
        config<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
            <span class="token punctuation">{</span>
                <span class="token string">&quot;cross_entropy_weight&quot;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>cross_entropy_weight<span class="token punctuation">,</span>
                <span class="token string">&quot;variance_loss_weight&quot;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>variance_loss_weight<span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">return</span> config


<span class="token keyword">def</span> <span class="token function">make_model</span><span class="token punctuation">(</span>training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    inputs <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>
    model_inputs <span class="token operator">=</span> <span class="token punctuation">[</span>inputs<span class="token punctuation">]</span>

    x1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
    x2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>
    x3 <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span>
    net <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>GlobalAveragePooling2D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span>
    output_logits <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;output_logit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>

    <span class="token comment"># Create the endpoint layer</span>
    <span class="token keyword">if</span> training<span class="token punctuation">:</span>
        targets <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>
        model_inputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>targets<span class="token punctuation">)</span>
        endpoint_layer <span class="token operator">=</span> ClassificationAndVarianceMatchingLoss<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;endpoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
            output_logits<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x3
        <span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        endpoint_layer <span class="token operator">=</span> ClassificationAndVarianceMatchingLoss<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;endpoint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
            output_logits
        <span class="token punctuation">)</span>

    <span class="token comment"># Create the model</span>
    model <span class="token operator">=</span> tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>model_inputs<span class="token punctuation">,</span> outputs<span class="token operator">=</span>endpoint_layer<span class="token punctuation">)</span>

    <span class="token keyword">return</span> model


<span class="token keyword">def</span> <span class="token function">prepare_ds</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> shuffle<span class="token punctuation">:</span>
        ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>batch_size <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>

    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>
        <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>x<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">,</span> <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> y<span class="token punctuation">}</span>
    <span class="token punctuation">)</span>

    ds <span class="token operator">=</span> ds<span class="token punctuation">.</span>prefetch<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>data<span class="token punctuation">.</span>AUTOTUNE<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ds


<span class="token comment"># Load in the MNIST dataset</span>
train_ds<span class="token punctuation">,</span> test_ds <span class="token operator">=</span> tfds<span class="token punctuation">.</span>load<span class="token punctuation">(</span>
    <span class="token string">&quot;mnist&quot;</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;train&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shuffle_files<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> as_supervised<span class="token operator">=</span><span class="token boolean">True</span>
<span class="token punctuation">)</span>

<span class="token comment"># Prepare the datasets</span>
batch_size <span class="token operator">=</span> <span class="token number">32</span>
train_ds <span class="token operator">=</span> prepare_ds<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_ds <span class="token operator">=</span> prepare_ds<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>

<span class="token comment"># Create the model</span>
model <span class="token operator">=</span> make_model<span class="token punctuation">(</span>training<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Compile and train the model</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">&quot;adam&quot;</span><span class="token punctuation">)</span>
history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ds<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># Evaluate the model</span>
eval_results <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_ds<span class="token punctuation">,</span> return_dict<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># Create the inference model</span>
inference_model <span class="token operator">=</span> make_model<span class="token punctuation">(</span>training<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># Load in the weights from the training model</span>
inference_model<span class="token punctuation">.</span>set_weights<span class="token punctuation">(</span>model<span class="token punctuation">.</span>get_weights<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Create a random batch of data</span>
random_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Predict the random batch of data</span>
predictions <span class="token operator">=</span> inference_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>random_batch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function f(g,y){const o=p("Share"),t=p("ExternalLinkIcon");return i(),l("div",null,[a(o,{colorful:"",services:["email","facebook","linkedin","reddit","twitter"]}),r,s("p",null,[n("In this tutorial, I will cover a Keras implementation of endpoint layers. FranÃ§ois Chollet has a great "),s("a",d,[n("code example"),a(t)]),n(", but I will provide a more detailed explanation in this post for those who are new to the concept.")]),k,s("p",null,[n("First, we need to load in the MNIST dataset. We can use the "),m,n(),s("a",v,[n("package"),a(t)]),n(" to do this. Then, we can implement our data pipeline using the "),b,n(),s("a",h,[n("API"),a(t)]),n(". Here's how we can do that:")]),_])}const q=c(u,[["render",f],["__file","endpoint_layers.html.vue"]]);export{q as default};
